// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoEcho.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ProtoEcho.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProtoEchoRoot

@implementation ProtoEchoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ProtoEchoRoot_FileDescriptor

static GPBFileDescriptor *ProtoEchoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ppmsg"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PackageTypes

GPBEnumDescriptor *PackageTypes_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PtNone\000PtEcho\000PtProtoBuffer\000PtJson\000";
    static const int32_t values[] = {
        PackageTypes_PtNone,
        PackageTypes_PtEcho,
        PackageTypes_PtProtoBuffer,
        PackageTypes_PtJson,
    };
    static const char *extraTextFormatInfo = "\004\000\006\000\001\006\000\002\r\000\003\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PackageTypes)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PackageTypes_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PackageTypes_IsValidValue(int32_t value__) {
  switch (value__) {
    case PackageTypes_PtNone:
    case PackageTypes_PtEcho:
    case PackageTypes_PtProtoBuffer:
    case PackageTypes_PtJson:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProtoTypes

GPBEnumDescriptor *ProtoTypes_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PtIdnone\000PtIdecho\000PtIdresStatus\000PtIdserv"
        "erTime\000PtIdlogin\000PtIdloginEvent\000PtIddouN"
        "iu\000PtIddouNiuCreateRoom\000PtIddouNiuDestor"
        "yRoom\000PtIddouNiuEnterRoom\000PtIddouNiuLeav"
        "eRoom\000PtIddouNiuControlRoom\000PtIddouNiuEv"
        "entBet\000PtIddouNiuEventGameResult\000PtIddou"
        "NiuEventOnBet\000PtIddouNiuBetOne\000PtIddouNi"
        "uBets\000PtIddouNiuBankerReq\000PtIddouNiuHist"
        "oryReq\000PtIdapigetUsersBasicInfo\000PtIdapig"
        "etRewordConfig\000PtIdapigetGamesInfo\000";
    static const int32_t values[] = {
        ProtoTypes_PtIdnone,
        ProtoTypes_PtIdecho,
        ProtoTypes_PtIdresStatus,
        ProtoTypes_PtIdserverTime,
        ProtoTypes_PtIdlogin,
        ProtoTypes_PtIdloginEvent,
        ProtoTypes_PtIddouNiu,
        ProtoTypes_PtIddouNiuCreateRoom,
        ProtoTypes_PtIddouNiuDestoryRoom,
        ProtoTypes_PtIddouNiuEnterRoom,
        ProtoTypes_PtIddouNiuLeaveRoom,
        ProtoTypes_PtIddouNiuControlRoom,
        ProtoTypes_PtIddouNiuEventBet,
        ProtoTypes_PtIddouNiuEventGameResult,
        ProtoTypes_PtIddouNiuEventOnBet,
        ProtoTypes_PtIddouNiuBetOne,
        ProtoTypes_PtIddouNiuBets,
        ProtoTypes_PtIddouNiuBankerReq,
        ProtoTypes_PtIddouNiuHistoryReq,
        ProtoTypes_PtIdapigetUsersBasicInfo,
        ProtoTypes_PtIdapigetRewordConfig,
        ProtoTypes_PtIdapigetGamesInfo,
    };
    static const char *extraTextFormatInfo = "\026\000\003b\003\000\001\003b\003\000\002\003b\010\000\003\003b\t\000\004\003b\004\000\005\003b\t\000\006\003b\005\000\007\003b\017\000\010\003b\020\000\t\003b\016\000\n\003b\016\000\013\003b\020\000\014\003b\r\000\r\003b\024\000\016\003b\017\000\017\003b\013\000\020\003b\t\000\021\003b\016\000\022\003b\017\000\023\003e\020\000\024\003e\016\000\025\003e\013\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProtoTypes)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProtoTypes_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProtoTypes_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProtoTypes_PtIdnone:
    case ProtoTypes_PtIdecho:
    case ProtoTypes_PtIdresStatus:
    case ProtoTypes_PtIdserverTime:
    case ProtoTypes_PtIdlogin:
    case ProtoTypes_PtIdloginEvent:
    case ProtoTypes_PtIddouNiu:
    case ProtoTypes_PtIddouNiuCreateRoom:
    case ProtoTypes_PtIddouNiuDestoryRoom:
    case ProtoTypes_PtIddouNiuEnterRoom:
    case ProtoTypes_PtIddouNiuLeaveRoom:
    case ProtoTypes_PtIddouNiuControlRoom:
    case ProtoTypes_PtIddouNiuEventBet:
    case ProtoTypes_PtIddouNiuEventGameResult:
    case ProtoTypes_PtIddouNiuEventOnBet:
    case ProtoTypes_PtIddouNiuBetOne:
    case ProtoTypes_PtIddouNiuBets:
    case ProtoTypes_PtIddouNiuBankerReq:
    case ProtoTypes_PtIddouNiuHistoryReq:
    case ProtoTypes_PtIdapigetUsersBasicInfo:
    case ProtoTypes_PtIdapigetRewordConfig:
    case ProtoTypes_PtIdapigetGamesInfo:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum BetOnTypes

GPBEnumDescriptor *BetOnTypes_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Botnone\000Botone\000Bottow\000Botthree\000";
    static const int32_t values[] = {
        BetOnTypes_Botnone,
        BetOnTypes_Botone,
        BetOnTypes_Bottow,
        BetOnTypes_Botthree,
    };
    static const char *extraTextFormatInfo = "\004\000d\003\000\001d\002\000\002d\002\000\003d\004\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BetOnTypes)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BetOnTypes_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BetOnTypes_IsValidValue(int32_t value__) {
  switch (value__) {
    case BetOnTypes_Botnone:
    case BetOnTypes_Botone:
    case BetOnTypes_Bottow:
    case BetOnTypes_Botthree:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - EchoBuf

@implementation EchoBuf

@dynamic hello;

typedef struct EchoBuf__storage_ {
  uint32_t _has_storage_[1];
  NSString *hello;
} EchoBuf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hello",
        .dataTypeSpecific.className = NULL,
        .number = EchoBuf_FieldNumber_Hello,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EchoBuf__storage_, hello),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EchoBuf class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EchoBuf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseStatus

@implementation ResponseStatus

@dynamic status;
@dynamic info;
@dynamic time;

typedef struct ResponseStatus__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *info;
  int64_t time;
} ResponseStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = ResponseStatus_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseStatus__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "info",
        .dataTypeSpecific.className = NULL,
        .number = ResponseStatus_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseStatus__storage_, info),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = ResponseStatus_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseStatus__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseStatus class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002D\000\003D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserInfo

@implementation UserInfo

@dynamic id_p;
@dynamic token;

typedef struct UserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *token;
} UserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserInfo__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserInfo__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserInfo class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000ID\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Login

@implementation Login

@dynamic id_p;
@dynamic token;

typedef struct Login__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *token;
} Login__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Login__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Login__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Login class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Login__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000ID\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Login_ResponseStatus

GPBEnumDescriptor *Login_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsok\000Rserror\000";
    static const int32_t values[] = {
        Login_ResponseStatus_Rsok,
        Login_ResponseStatus_Rserror,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Login_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Login_ResponseStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Login_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case Login_ResponseStatus_Rsok:
    case Login_ResponseStatus_Rserror:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LoginEvent

@implementation LoginEvent

@dynamic ip;
@dynamic time;

typedef struct LoginEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *ip;
  int64_t time;
} LoginEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = LoginEvent_FieldNumber_Ip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginEvent__storage_, ip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = LoginEvent_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginEvent__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginEvent class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001B\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuCreateRoom

@implementation DouNiuCreateRoom

@dynamic flags;

typedef struct DouNiuCreateRoom__storage_ {
  uint32_t _has_storage_[1];
  int32_t flags;
} DouNiuCreateRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuCreateRoom_FieldNumber_Flags,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuCreateRoom__storage_, flags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuCreateRoom class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuCreateRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum DouNiuCreateRoom_ResponseStatus

GPBEnumDescriptor *DouNiuCreateRoom_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsok\000Rsold\000Rserror\000";
    static const int32_t values[] = {
        DouNiuCreateRoom_ResponseStatus_Rsok,
        DouNiuCreateRoom_ResponseStatus_Rsold,
        DouNiuCreateRoom_ResponseStatus_Rserror,
    };
    static const char *extraTextFormatInfo = "\001\001c\002\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuCreateRoom_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuCreateRoom_ResponseStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuCreateRoom_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuCreateRoom_ResponseStatus_Rsok:
    case DouNiuCreateRoom_ResponseStatus_Rsold:
    case DouNiuCreateRoom_ResponseStatus_Rserror:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuControlRoom

@implementation DouNiuControlRoom

@dynamic flags;

typedef struct DouNiuControlRoom__storage_ {
  uint32_t _has_storage_[1];
  int32_t flags;
} DouNiuControlRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuControlRoom_FieldNumber_Flags,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuControlRoom__storage_, flags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuControlRoom class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuControlRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum DouNiuControlRoom_ResponseStatus

GPBEnumDescriptor *DouNiuControlRoom_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsok\000RsnotInRoom\000Rsunknown\000Rsproto\000";
    static const int32_t values[] = {
        DouNiuControlRoom_ResponseStatus_Rsok,
        DouNiuControlRoom_ResponseStatus_RsnotInRoom,
        DouNiuControlRoom_ResponseStatus_Rsunknown,
        DouNiuControlRoom_ResponseStatus_Rsproto,
    };
    static const char *extraTextFormatInfo = "\003\001c\010\000\002c\006\000\003c\004\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuControlRoom_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuControlRoom_ResponseStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuControlRoom_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuControlRoom_ResponseStatus_Rsok:
    case DouNiuControlRoom_ResponseStatus_RsnotInRoom:
    case DouNiuControlRoom_ResponseStatus_Rsunknown:
    case DouNiuControlRoom_ResponseStatus_Rsproto:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuEnterRoom

@implementation DouNiuEnterRoom

@dynamic roomId;

typedef struct DouNiuEnterRoom__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
} DouNiuEnterRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEnterRoom_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuEnterRoom__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuEnterRoom class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuEnterRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001EA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuRoom

@implementation DouNiuRoom

@dynamic roomId;
@dynamic hasBanker, banker;
@dynamic gameStep;
@dynamic gameStepTickLeft;
@dynamic flags;
@dynamic handArray, handArray_Count;

typedef struct DouNiuRoom__storage_ {
  uint32_t _has_storage_[1];
  DouNiuRoom_RoomGameSteps gameStep;
  int32_t gameStepTickLeft;
  int32_t flags;
  NSString *roomId;
  DouNiuBanker *banker;
  NSMutableArray *handArray;
} DouNiuRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuRoom_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuRoom__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "banker",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBanker),
        .number = DouNiuRoom_FieldNumber_Banker,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuRoom__storage_, banker),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameStep",
        .dataTypeSpecific.enumDescFunc = DouNiuRoom_RoomGameSteps_EnumDescriptor,
        .number = DouNiuRoom_FieldNumber_GameStep,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuRoom__storage_, gameStep),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gameStepTickLeft",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuRoom_FieldNumber_GameStepTickLeft,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuRoom__storage_, gameStepTickLeft),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flags",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuRoom_FieldNumber_Flags,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DouNiuRoom__storage_, flags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "handArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuGameHand),
        .number = DouNiuRoom_FieldNumber_HandArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuRoom__storage_, handArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuRoom class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuRoom__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001EA\000\002F\000\003H\000\004P\000\005E\000\006\000Hand\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuRoom_GameStep_RawValue(DouNiuRoom *message) {
  GPBDescriptor *descriptor = [DouNiuRoom descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuRoom_FieldNumber_GameStep];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuRoom_GameStep_RawValue(DouNiuRoom *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuRoom descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuRoom_FieldNumber_GameStep];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuRoom_RoomGameSteps

GPBEnumDescriptor *DouNiuRoom_RoomGameSteps_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rgsnone\000Rgsprepair\000Rgsbeting\000RgsdealCard"
        "s\000";
    static const int32_t values[] = {
        DouNiuRoom_RoomGameSteps_Rgsnone,
        DouNiuRoom_RoomGameSteps_Rgsprepair,
        DouNiuRoom_RoomGameSteps_Rgsbeting,
        DouNiuRoom_RoomGameSteps_RgsdealCards,
    };
    static const char *extraTextFormatInfo = "\004\000d\003\000\001d\006\000\002d\005\000\003d\010\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuRoom_RoomGameSteps)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuRoom_RoomGameSteps_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuRoom_RoomGameSteps_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuRoom_RoomGameSteps_Rgsnone:
    case DouNiuRoom_RoomGameSteps_Rgsprepair:
    case DouNiuRoom_RoomGameSteps_Rgsbeting:
    case DouNiuRoom_RoomGameSteps_RgsdealCards:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuEnterRoomRes

@implementation DouNiuEnterRoomRes

@dynamic status;
@dynamic hasRoom, room;

typedef struct DouNiuEnterRoomRes__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  DouNiuRoom *room;
} DouNiuEnterRoomRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEnterRoomRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuEnterRoomRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "room",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuRoom),
        .number = DouNiuEnterRoomRes_FieldNumber_Room,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuEnterRoomRes__storage_, room),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuEnterRoomRes class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuEnterRoomRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum DouNiuEnterRoomRes_ResponseStatus

GPBEnumDescriptor *DouNiuEnterRoomRes_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsok\000RsroomNotFound\000RsenterFailed\000Rsunkn"
        "own\000";
    static const int32_t values[] = {
        DouNiuEnterRoomRes_ResponseStatus_Rsok,
        DouNiuEnterRoomRes_ResponseStatus_RsroomNotFound,
        DouNiuEnterRoomRes_ResponseStatus_RsenterFailed,
        DouNiuEnterRoomRes_ResponseStatus_Rsunknown,
    };
    static const char *extraTextFormatInfo = "\003\001c\013\000\002c\n\000\003c\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuEnterRoomRes_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuEnterRoomRes_ResponseStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuEnterRoomRes_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuEnterRoomRes_ResponseStatus_Rsok:
    case DouNiuEnterRoomRes_ResponseStatus_RsroomNotFound:
    case DouNiuEnterRoomRes_ResponseStatus_RsenterFailed:
    case DouNiuEnterRoomRes_ResponseStatus_Rsunknown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuBet

@implementation DouNiuBet

@dynamic betOn;
@dynamic coin;
@dynamic jetton;

typedef struct DouNiuBet__storage_ {
  uint32_t _has_storage_[1];
  BetOnTypes betOn;
  int32_t jetton;
  int64_t coin;
} DouNiuBet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "betOn",
        .dataTypeSpecific.enumDescFunc = BetOnTypes_EnumDescriptor,
        .number = DouNiuBet_FieldNumber_BetOn,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuBet__storage_, betOn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "coin",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBet_FieldNumber_Coin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuBet__storage_, coin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "jetton",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBet_FieldNumber_Jetton,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuBet__storage_, jetton),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuBet class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuBet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001E\000\002D\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuBet_BetOn_RawValue(DouNiuBet *message) {
  GPBDescriptor *descriptor = [DouNiuBet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuBet_FieldNumber_BetOn];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuBet_BetOn_RawValue(DouNiuBet *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuBet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuBet_FieldNumber_BetOn];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuBet_ResponseStatus

GPBEnumDescriptor *DouNiuBet_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsok\000RshandInvalid\000RswagerNotEnough\000Rsba"
        "nkerRunout\000Rsbanker\000RsnotInRoom\000Rsunknow"
        "n\000";
    static const int32_t values[] = {
        DouNiuBet_ResponseStatus_Rsok,
        DouNiuBet_ResponseStatus_RshandInvalid,
        DouNiuBet_ResponseStatus_RswagerNotEnough,
        DouNiuBet_ResponseStatus_RsbankerRunout,
        DouNiuBet_ResponseStatus_Rsbanker,
        DouNiuBet_ResponseStatus_RsnotInRoom,
        DouNiuBet_ResponseStatus_Rsunknown,
    };
    static const char *extraTextFormatInfo = "\006\001c\n\000\002c\r\000\003c\013\000\004c\005\000\005c\010\000\006c\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuBet_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuBet_ResponseStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuBet_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuBet_ResponseStatus_Rsok:
    case DouNiuBet_ResponseStatus_RshandInvalid:
    case DouNiuBet_ResponseStatus_RswagerNotEnough:
    case DouNiuBet_ResponseStatus_RsbankerRunout:
    case DouNiuBet_ResponseStatus_Rsbanker:
    case DouNiuBet_ResponseStatus_RsnotInRoom:
    case DouNiuBet_ResponseStatus_Rsunknown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuBetOne

@implementation DouNiuBetOne

@dynamic roomId;
@dynamic gameId;
@dynamic hasBet, bet;

typedef struct DouNiuBetOne__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
  NSString *gameId;
  DouNiuBet *bet;
} DouNiuBetOne__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBetOne_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuBetOne__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBetOne_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuBetOne__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bet",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuBetOne_FieldNumber_Bet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuBetOne__storage_, bet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuBetOne class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuBetOne__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001EA\000\002EA\000\003C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuBets

@implementation DouNiuBets

@dynamic roomId;
@dynamic gameId;
@dynamic betsArray, betsArray_Count;

typedef struct DouNiuBets__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
  NSString *gameId;
  NSMutableArray *betsArray;
} DouNiuBets__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBets_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuBets__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBets_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuBets__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "betsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuBets_FieldNumber_BetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuBets__storage_, betsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuBets class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuBets__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001EA\000\002EA\000\003\000Bets\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuUserBet

@implementation DouNiuUserBet

@dynamic userId;
@dynamic hasBet, bet;

typedef struct DouNiuUserBet__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  DouNiuBet *bet;
} DouNiuUserBet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuUserBet_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuUserBet__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bet",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuUserBet_FieldNumber_Bet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuUserBet__storage_, bet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuUserBet class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuUserBet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003EA\000\004C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuEventOnBet

@implementation DouNiuEventOnBet

@dynamic roomId;
@dynamic gameId;
@dynamic hasUserBet, userBet;
@dynamic allBetsArray, allBetsArray_Count;

typedef struct DouNiuEventOnBet__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
  NSString *gameId;
  DouNiuUserBet *userBet;
  NSMutableArray *allBetsArray;
} DouNiuEventOnBet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventOnBet_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuEventOnBet__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventOnBet_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuEventOnBet__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userBet",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuUserBet),
        .number = DouNiuEventOnBet_FieldNumber_UserBet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuEventOnBet__storage_, userBet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allBetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuEventOnBet_FieldNumber_AllBetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuEventOnBet__storage_, allBetsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuEventOnBet class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuEventOnBet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001EA\000\002EA\000\003G\000\004\000AllBets\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuEventOnBets

@implementation DouNiuEventOnBets

@dynamic roomId;
@dynamic gameId;
@dynamic userBetsArray, userBetsArray_Count;
@dynamic allBetsArray, allBetsArray_Count;

typedef struct DouNiuEventOnBets__storage_ {
  uint32_t _has_storage_[1];
  NSString *roomId;
  NSString *gameId;
  NSMutableArray *userBetsArray;
  NSMutableArray *allBetsArray;
} DouNiuEventOnBets__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventOnBets_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuEventOnBets__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventOnBets_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuEventOnBets__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userBetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuUserBet),
        .number = DouNiuEventOnBets_FieldNumber_UserBetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuEventOnBets__storage_, userBetsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allBetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuEventOnBets_FieldNumber_AllBetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuEventOnBets__storage_, allBetsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuEventOnBets class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuEventOnBets__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001EA\000\002EA\000\003\000UserBets\000\004\000AllBets\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuEventBet

@implementation DouNiuEventBet

@dynamic roomId;
@dynamic gameId;
@dynamic time;
@dynamic dneb;
@dynamic hasBanker, banker;
@dynamic tickLeft;
@dynamic allBetsArray, allBetsArray_Count;
@dynamic hasRoom, room;

typedef struct DouNiuEventBet__storage_ {
  uint32_t _has_storage_[1];
  DouNiuEventBet_DBEBTypes dneb;
  int32_t tickLeft;
  NSString *roomId;
  NSString *gameId;
  DouNiuBanker *banker;
  NSMutableArray *allBetsArray;
  DouNiuRoom *room;
  int64_t time;
} DouNiuEventBet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventBet_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventBet_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventBet_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dneb",
        .dataTypeSpecific.enumDescFunc = DouNiuEventBet_DBEBTypes_EnumDescriptor,
        .number = DouNiuEventBet_FieldNumber_Dneb,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, dneb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "banker",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBanker),
        .number = DouNiuEventBet_FieldNumber_Banker,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, banker),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tickLeft",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventBet_FieldNumber_TickLeft,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, tickLeft),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allBetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuEventBet_FieldNumber_AllBetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, allBetsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "room",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuRoom),
        .number = DouNiuEventBet_FieldNumber_Room,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DouNiuEventBet__storage_, room),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuEventBet class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuEventBet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001EA\000\002EA\000\003D\000\004D\000\005F\000\006H\000\007\000AllBets\000\010D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuEventBet_Dneb_RawValue(DouNiuEventBet *message) {
  GPBDescriptor *descriptor = [DouNiuEventBet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuEventBet_FieldNumber_Dneb];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuEventBet_Dneb_RawValue(DouNiuEventBet *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuEventBet descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuEventBet_FieldNumber_Dneb];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuEventBet_DBEBTypes

GPBEnumDescriptor *DouNiuEventBet_DBEBTypes_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Dbebtbegin\000Dbebtend\000Dbebtchanged\000Dbebtne"
        "xt\000Dbebtstart\000";
    static const int32_t values[] = {
        DouNiuEventBet_DBEBTypes_Dbebtbegin,
        DouNiuEventBet_DBEBTypes_Dbebtend,
        DouNiuEventBet_DBEBTypes_Dbebtchanged,
        DouNiuEventBet_DBEBTypes_Dbebtnext,
        DouNiuEventBet_DBEBTypes_Dbebtstart,
    };
    static const char *extraTextFormatInfo = "\005\000f\004\000\001f\002\000\002f\006\000\003f\003\000\004f\004\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuEventBet_DBEBTypes)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuEventBet_DBEBTypes_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuEventBet_DBEBTypes_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuEventBet_DBEBTypes_Dbebtbegin:
    case DouNiuEventBet_DBEBTypes_Dbebtend:
    case DouNiuEventBet_DBEBTypes_Dbebtchanged:
    case DouNiuEventBet_DBEBTypes_Dbebtnext:
    case DouNiuEventBet_DBEBTypes_Dbebtstart:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuGameHand

@implementation DouNiuGameHand

@dynamic cardsArray, cardsArray_Count;
@dynamic niuN;
@dynamic maxCard;
@dynamic five;
@dynamic rate;
@dynamic winBanker;

typedef struct DouNiuGameHand__storage_ {
  uint32_t _has_storage_[1];
  int32_t niuN;
  int32_t maxCard;
  int32_t five;
  int32_t winBanker;
  GPBInt32Array *cardsArray;
  int64_t rate;
} DouNiuGameHand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardsArray",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuGameHand_FieldNumber_CardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuGameHand__storage_, cardsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "niuN",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuGameHand_FieldNumber_NiuN,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuGameHand__storage_, niuN),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxCard",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuGameHand_FieldNumber_MaxCard,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuGameHand__storage_, maxCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "five",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuGameHand_FieldNumber_Five,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuGameHand__storage_, five),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuGameHand_FieldNumber_Rate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuGameHand__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "winBanker",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuGameHand_FieldNumber_WinBanker,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DouNiuGameHand__storage_, winBanker),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuGameHand class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuGameHand__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\000Cards\000\002D\000\003G\000\004D\000\005D\000\006I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuEventGameResult

@implementation DouNiuEventGameResult

@dynamic roomId;
@dynamic gameId;
@dynamic time;
@dynamic handArray, handArray_Count;
@dynamic winnerId;
@dynamic bankerWinCoin;
@dynamic selfWinCoin;
@dynamic status;
@dynamic reserve;
@dynamic allBetsArray, allBetsArray_Count;

typedef struct DouNiuEventGameResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t winnerId;
  int32_t status;
  int32_t reserve;
  NSString *roomId;
  NSString *gameId;
  NSMutableArray *handArray;
  NSMutableArray *allBetsArray;
  int64_t time;
  int64_t bankerWinCoin;
  int64_t selfWinCoin;
} DouNiuEventGameResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "handArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuGameHand),
        .number = DouNiuEventGameResult_FieldNumber_HandArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, handArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "winnerId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_WinnerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, winnerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bankerWinCoin",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_BankerWinCoin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, bankerWinCoin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selfWinCoin",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_SelfWinCoin,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, selfWinCoin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reserve",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuEventGameResult_FieldNumber_Reserve,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, reserve),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allBetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBet),
        .number = DouNiuEventGameResult_FieldNumber_AllBetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuEventGameResult__storage_, allBetsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuEventGameResult class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuEventGameResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001EA\000\002EA\000\003D\000\004\000Hand\000\005GA\000\006M\000\010K\000\tF\000\nG\000\013\000All"
        "Bets\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum DouNiuEventGameResult_ResponseStatus

GPBEnumDescriptor *DouNiuEventGameResult_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsok\000Rserror\000";
    static const int32_t values[] = {
        DouNiuEventGameResult_ResponseStatus_Rsok,
        DouNiuEventGameResult_ResponseStatus_Rserror,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuEventGameResult_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuEventGameResult_ResponseStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuEventGameResult_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuEventGameResult_ResponseStatus_Rsok:
    case DouNiuEventGameResult_ResponseStatus_Rserror:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuBankerReq

@implementation DouNiuBankerReq

@dynamic opt;
@dynamic roomId;

typedef struct DouNiuBankerReq__storage_ {
  uint32_t _has_storage_[1];
  DouNiuBankerReq_DNBOperations opt;
  NSString *roomId;
} DouNiuBankerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opt",
        .dataTypeSpecific.enumDescFunc = DouNiuBankerReq_DNBOperations_EnumDescriptor,
        .number = DouNiuBankerReq_FieldNumber_Opt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuBankerReq__storage_, opt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBankerReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuBankerReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuBankerReq class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuBankerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002EA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuBankerReq_Opt_RawValue(DouNiuBankerReq *message) {
  GPBDescriptor *descriptor = [DouNiuBankerReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuBankerReq_FieldNumber_Opt];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuBankerReq_Opt_RawValue(DouNiuBankerReq *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuBankerReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuBankerReq_FieldNumber_Opt];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuBankerReq_DNBOperations

GPBEnumDescriptor *DouNiuBankerReq_DNBOperations_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Dnbonone\000DnbogetBankerList\000DnboapplyBank"
        "er\000DnboapplyUnBanker\000";
    static const int32_t values[] = {
        DouNiuBankerReq_DNBOperations_Dnbonone,
        DouNiuBankerReq_DNBOperations_DnbogetBankerList,
        DouNiuBankerReq_DNBOperations_DnboapplyBanker,
        DouNiuBankerReq_DNBOperations_DnboapplyUnBanker,
    };
    static const char *extraTextFormatInfo = "\004\000e\003\000\001e\014\000\002e\n\000\003e\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuBankerReq_DNBOperations)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuBankerReq_DNBOperations_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuBankerReq_DNBOperations_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuBankerReq_DNBOperations_Dnbonone:
    case DouNiuBankerReq_DNBOperations_DnbogetBankerList:
    case DouNiuBankerReq_DNBOperations_DnboapplyBanker:
    case DouNiuBankerReq_DNBOperations_DnboapplyUnBanker:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuBanker

@implementation DouNiuBanker

@dynamic id_p;
@dynamic coin;
@dynamic nickName;
@dynamic icon;
@dynamic isSystem;

typedef struct DouNiuBanker__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *nickName;
  NSString *icon;
  int64_t coin;
} DouNiuBanker__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBanker_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuBanker__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coin",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBanker_FieldNumber_Coin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuBanker__storage_, coin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBanker_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuBanker__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBanker_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuBanker__storage_, icon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSystem",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuBanker_FieldNumber_IsSystem,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuBanker class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuBanker__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\000ID\000\002D\000\003H\000\004D\000\005H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuBankerRes

@implementation DouNiuBankerRes

@dynamic status;
@dynamic bankersArray, bankersArray_Count;

typedef struct DouNiuBankerRes__storage_ {
  uint32_t _has_storage_[1];
  DouNiuBankerRes_ResponseStatus status;
  NSMutableArray *bankersArray;
} DouNiuBankerRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = DouNiuBankerRes_ResponseStatus_EnumDescriptor,
        .number = DouNiuBankerRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuBankerRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bankersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuBanker),
        .number = DouNiuBankerRes_FieldNumber_BankersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuBankerRes__storage_, bankersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuBankerRes class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuBankerRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000Bankers\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuBankerRes_Status_RawValue(DouNiuBankerRes *message) {
  GPBDescriptor *descriptor = [DouNiuBankerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuBankerRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuBankerRes_Status_RawValue(DouNiuBankerRes *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuBankerRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuBankerRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuBankerRes_ResponseStatus

GPBEnumDescriptor *DouNiuBankerRes_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsnone\000Rserror\000Rscoin\000Rsroom\000";
    static const int32_t values[] = {
        DouNiuBankerRes_ResponseStatus_Rsnone,
        DouNiuBankerRes_ResponseStatus_Rserror,
        DouNiuBankerRes_ResponseStatus_Rscoin,
        DouNiuBankerRes_ResponseStatus_Rsroom,
    };
    static const char *extraTextFormatInfo = "\004\000c\003\000\001c\004\000\002c\003\000\003c\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuBankerRes_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuBankerRes_ResponseStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuBankerRes_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuBankerRes_ResponseStatus_Rsnone:
    case DouNiuBankerRes_ResponseStatus_Rserror:
    case DouNiuBankerRes_ResponseStatus_Rscoin:
    case DouNiuBankerRes_ResponseStatus_Rsroom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuHistoryReq

@implementation DouNiuHistoryReq

@dynamic start;
@dynamic count;
@dynamic htype;
@dynamic roomId;
@dynamic gameId;

typedef struct DouNiuHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t start;
  int32_t count;
  DouNiuHistoryReq_HistoryType htype;
  NSString *roomId;
  NSString *gameId;
} DouNiuHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryReq_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuHistoryReq__storage_, start),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryReq_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuHistoryReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "htype",
        .dataTypeSpecific.enumDescFunc = DouNiuHistoryReq_HistoryType_EnumDescriptor,
        .number = DouNiuHistoryReq_FieldNumber_Htype,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuHistoryReq__storage_, htype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryReq_FieldNumber_RoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuHistoryReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryReq_FieldNumber_GameId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DouNiuHistoryReq__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuHistoryReq class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuHistoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001E\000\002E\000\003b\003\000\004EA\000\005EA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuHistoryReq_Htype_RawValue(DouNiuHistoryReq *message) {
  GPBDescriptor *descriptor = [DouNiuHistoryReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuHistoryReq_FieldNumber_Htype];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuHistoryReq_Htype_RawValue(DouNiuHistoryReq *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuHistoryReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuHistoryReq_FieldNumber_Htype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuHistoryReq_HistoryType

GPBEnumDescriptor *DouNiuHistoryReq_HistoryType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Htself\000Htgames\000HtgameWinCoin\000";
    static const int32_t values[] = {
        DouNiuHistoryReq_HistoryType_Htself,
        DouNiuHistoryReq_HistoryType_Htgames,
        DouNiuHistoryReq_HistoryType_HtgameWinCoin,
    };
    static const char *extraTextFormatInfo = "\003\000c\003\000\001c\004\000\002c\n\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuHistoryReq_HistoryType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuHistoryReq_HistoryType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuHistoryReq_HistoryType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuHistoryReq_HistoryType_Htself:
    case DouNiuHistoryReq_HistoryType_Htgames:
    case DouNiuHistoryReq_HistoryType_HtgameWinCoin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DouNiuHistoryHand

@implementation DouNiuHistoryHand

@dynamic win;
@dynamic niuN;
@dynamic rate;
@dynamic coin;

typedef struct DouNiuHistoryHand__storage_ {
  uint32_t _has_storage_[1];
  int32_t win;
  int32_t niuN;
  int64_t rate;
  int64_t coin;
} DouNiuHistoryHand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "win",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryHand_FieldNumber_Win,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuHistoryHand__storage_, win),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "niuN",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryHand_FieldNumber_NiuN,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuHistoryHand__storage_, niuN),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryHand_FieldNumber_Rate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuHistoryHand__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "coin",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryHand_FieldNumber_Coin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuHistoryHand__storage_, coin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuHistoryHand class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuHistoryHand__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001C\000\002D\000\003D\000\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuHistoryItem

@implementation DouNiuHistoryItem

@dynamic bankerId;
@dynamic roomId;
@dynamic gameId;
@dynamic userId;
@dynamic time;
@dynamic winCoin;
@dynamic handsArray, handsArray_Count;
@dynamic bankerNiuN;
@dynamic bankerRate;

typedef struct DouNiuHistoryItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t bankerNiuN;
  int32_t bankerRate;
  NSString *bankerId;
  NSString *roomId;
  NSString *gameId;
  NSString *userId;
  NSMutableArray *handsArray;
  int64_t time;
  int64_t winCoin;
} DouNiuHistoryItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankerId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_BankerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, bankerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_GameId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, gameId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "winCoin",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_WinCoin,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, winCoin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "handsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuHistoryHand),
        .number = DouNiuHistoryItem_FieldNumber_HandsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, handsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bankerNiuN",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_BankerNiuN,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, bankerNiuN),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bankerRate",
        .dataTypeSpecific.className = NULL,
        .number = DouNiuHistoryItem_FieldNumber_BankerRate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DouNiuHistoryItem__storage_, bankerRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuHistoryItem class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuHistoryItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001GA\000\002EA\000\003EA\000\004EA\000\005D\000\006G\000\007\000Hands\000\010J\000\tJ\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DouNiuHistoryRes

@implementation DouNiuHistoryRes

@dynamic status;
@dynamic historyArray, historyArray_Count;

typedef struct DouNiuHistoryRes__storage_ {
  uint32_t _has_storage_[1];
  DouNiuHistoryRes_ResponseStatus status;
  NSMutableArray *historyArray;
} DouNiuHistoryRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = DouNiuHistoryRes_ResponseStatus_EnumDescriptor,
        .number = DouNiuHistoryRes_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DouNiuHistoryRes__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "historyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DouNiuHistoryItem),
        .number = DouNiuHistoryRes_FieldNumber_HistoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DouNiuHistoryRes__storage_, historyArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DouNiuHistoryRes class]
                                     rootClass:[ProtoEchoRoot class]
                                          file:ProtoEchoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DouNiuHistoryRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000History\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DouNiuHistoryRes_Status_RawValue(DouNiuHistoryRes *message) {
  GPBDescriptor *descriptor = [DouNiuHistoryRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuHistoryRes_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetDouNiuHistoryRes_Status_RawValue(DouNiuHistoryRes *message, int32_t value) {
  GPBDescriptor *descriptor = [DouNiuHistoryRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DouNiuHistoryRes_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DouNiuHistoryRes_ResponseStatus

GPBEnumDescriptor *DouNiuHistoryRes_ResponseStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Rsnone\000Rserror\000Rsdb\000";
    static const int32_t values[] = {
        DouNiuHistoryRes_ResponseStatus_Rsnone,
        DouNiuHistoryRes_ResponseStatus_Rserror,
        DouNiuHistoryRes_ResponseStatus_Rsdb,
    };
    static const char *extraTextFormatInfo = "\002\000c\003\000\001c\004\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DouNiuHistoryRes_ResponseStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DouNiuHistoryRes_ResponseStatus_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DouNiuHistoryRes_ResponseStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case DouNiuHistoryRes_ResponseStatus_Rsnone:
    case DouNiuHistoryRes_ResponseStatus_Rserror:
    case DouNiuHistoryRes_ResponseStatus_Rsdb:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
