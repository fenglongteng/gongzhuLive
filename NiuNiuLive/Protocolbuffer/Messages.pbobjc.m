// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Messages.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessagesRoot

@implementation MessagesRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessagesRoot_FileDescriptor

static GPBFileDescriptor *MessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MessageType

GPBEnumDescriptor *MessageType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MessageTypeNormal\000MessageTypeFlowText\000";
    static const int32_t values[] = {
        MessageType_MessageTypeNormal,
        MessageType_MessageTypeFlowText,
    };
    static const char *extraTextFormatInfo = "\002\000\021\000\001\023\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageType_MessageTypeNormal:
    case MessageType_MessageTypeFlowText:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SendMessageRequest

@implementation SendMessageRequest

@dynamic type;
@dynamic toUserId;
@dynamic message;
@dynamic needAck;
@dynamic jsonParam;
@dynamic subType;

typedef struct SendMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  MessageType type;
  int32_t subType;
  NSString *toUserId;
  NSString *message;
  NSString *jsonParam;
} SendMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MessageType_EnumDescriptor,
        .number = SendMessageRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_ToUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needAck",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_NeedAck,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "jsonParam",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_JsonParam,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, jsonParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_SubType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, subType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageRequest class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\010\000\004\007\000\005\t\000\006\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendMessageRequest_Type_RawValue(SendMessageRequest *message) {
  GPBDescriptor *descriptor = [SendMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendMessageRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetSendMessageRequest_Type_RawValue(SendMessageRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SendMessageRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendMessageRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SendMessageResponse

@implementation SendMessageResponse

@dynamic result;
@dynamic message;
@dynamic messageId;

typedef struct SendMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  int64_t messageId;
} SendMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SendMessageResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageResponse_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageResponse__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageResponse class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendMessageResponse_Result_RawValue(SendMessageResponse *message) {
  GPBDescriptor *descriptor = [SendMessageResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendMessageResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSendMessageResponse_Result_RawValue(SendMessageResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SendMessageResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendMessageResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SendInviteMessageRequest

@implementation SendInviteMessageRequest

@dynamic toUserIdArray, toUserIdArray_Count;
@dynamic roomId;
@dynamic message;
@dynamic password;
@dynamic jsonParam;
@dynamic subType;

typedef struct SendInviteMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t subType;
  NSMutableArray *toUserIdArray;
  NSString *roomId;
  NSString *message;
  NSString *password;
  NSString *jsonParam;
} SendInviteMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "toUserIdArray",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageRequest_FieldNumber_ToUserIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SendInviteMessageRequest__storage_, toUserIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageRequest_FieldNumber_RoomId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendInviteMessageRequest__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendInviteMessageRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageRequest_FieldNumber_Password,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendInviteMessageRequest__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsonParam",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageRequest_FieldNumber_JsonParam,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendInviteMessageRequest__storage_, jsonParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageRequest_FieldNumber_SubType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendInviteMessageRequest__storage_, subType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendInviteMessageRequest class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendInviteMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\000toUserId\000\002\006\000\005\t\000\006\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendInviteMessageResponse

@implementation SendInviteMessageResponse

@dynamic result;
@dynamic message;

typedef struct SendInviteMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} SendInviteMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SendInviteMessageResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendInviteMessageResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteMessageResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendInviteMessageResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendInviteMessageResponse class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendInviteMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendInviteMessageResponse_Result_RawValue(SendInviteMessageResponse *message) {
  GPBDescriptor *descriptor = [SendInviteMessageResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendInviteMessageResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSendInviteMessageResponse_Result_RawValue(SendInviteMessageResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SendInviteMessageResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendInviteMessageResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - OtherLoginPushMessage

@implementation OtherLoginPushMessage

@dynamic address;

typedef struct OtherLoginPushMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} OtherLoginPushMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = OtherLoginPushMessage_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OtherLoginPushMessage__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OtherLoginPushMessage class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OtherLoginPushMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OtherLoginPushMessageAck

@implementation OtherLoginPushMessageAck

@dynamic result;
@dynamic message;

typedef struct OtherLoginPushMessageAck__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} OtherLoginPushMessageAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = OtherLoginPushMessageAck_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OtherLoginPushMessageAck__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = OtherLoginPushMessageAck_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OtherLoginPushMessageAck__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OtherLoginPushMessageAck class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OtherLoginPushMessageAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OtherLoginPushMessageAck_Result_RawValue(OtherLoginPushMessageAck *message) {
  GPBDescriptor *descriptor = [OtherLoginPushMessageAck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OtherLoginPushMessageAck_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetOtherLoginPushMessageAck_Result_RawValue(OtherLoginPushMessageAck *message, int32_t value) {
  GPBDescriptor *descriptor = [OtherLoginPushMessageAck descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OtherLoginPushMessageAck_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PushInviteMessage

@implementation PushInviteMessage

@dynamic fromUserId;
@dynamic nickName;
@dynamic avatar;
@dynamic message;
@dynamic roomId;
@dynamic password;
@dynamic jsonParam;
@dynamic subType;

typedef struct PushInviteMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t subType;
  NSString *fromUserId;
  NSString *nickName;
  NSString *avatar;
  NSString *message;
  NSString *roomId;
  NSString *password;
  NSString *jsonParam;
} PushInviteMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_Message,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_RoomId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_Password,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsonParam",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_JsonParam,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, jsonParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = PushInviteMessage_FieldNumber_SubType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PushInviteMessage__storage_, subType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushInviteMessage class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushInviteMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\002\010\000\005\006\000\007\t\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushMessage

@implementation PushMessage

@dynamic type;
@dynamic messageId;
@dynamic fromUserId;
@dynamic level;
@dynamic nickName;
@dynamic avatar;
@dynamic message;
@dynamic needAck;
@dynamic jsonParam;
@dynamic subType;

typedef struct PushMessage__storage_ {
  uint32_t _has_storage_[1];
  MessageType type;
  int32_t level;
  int32_t subType;
  NSString *fromUserId;
  NSString *nickName;
  NSString *avatar;
  NSString *message;
  NSString *jsonParam;
  int64_t messageId;
} PushMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MessageType_EnumDescriptor,
        .number = PushMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushMessage__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushMessage__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_FromUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushMessage__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_Level,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PushMessage__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_NickName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PushMessage__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_Avatar,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PushMessage__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_Message,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PushMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needAck",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_NeedAck,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "jsonParam",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_JsonParam,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PushMessage__storage_, jsonParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = PushMessage_FieldNumber_SubType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PushMessage__storage_, subType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushMessage class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\t\000\003\n\000\005\010\000\010\007\000\t\t\000\n\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PushMessage_Type_RawValue(PushMessage *message) {
  GPBDescriptor *descriptor = [PushMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PushMessage_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPushMessage_Type_RawValue(PushMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [PushMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PushMessage_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PushMessageAck

@implementation PushMessageAck

@dynamic fromUserId;
@dynamic messageId;

typedef struct PushMessageAck__storage_ {
  uint32_t _has_storage_[1];
  NSString *fromUserId;
  int64_t messageId;
} PushMessageAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = PushMessageAck_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushMessageAck__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PushMessageAck_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushMessageAck__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushMessageAck class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushMessageAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LikePush

@implementation LikePush

@dynamic fromUserid;
@dynamic nickName;
@dynamic avatar;
@dynamic timestamp;
@dynamic jsonParam;
@dynamic subType;

typedef struct LikePush__storage_ {
  uint32_t _has_storage_[1];
  int32_t subType;
  NSString *fromUserid;
  NSString *nickName;
  NSString *avatar;
  NSString *jsonParam;
  int64_t timestamp;
} LikePush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserid",
        .dataTypeSpecific.className = NULL,
        .number = LikePush_FieldNumber_FromUserid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LikePush__storage_, fromUserid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = LikePush_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LikePush__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = LikePush_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LikePush__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = LikePush_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LikePush__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "jsonParam",
        .dataTypeSpecific.className = NULL,
        .number = LikePush_FieldNumber_JsonParam,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LikePush__storage_, jsonParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = LikePush_FieldNumber_SubType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LikePush__storage_, subType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LikePush class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LikePush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\002\010\000\005\t\000\006\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushLive

@implementation PushLive

@dynamic id_p;
@dynamic name;
@dynamic nickName;
@dynamic avatar;

typedef struct PushLive__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *nickName;
  NSString *avatar;
} PushLive__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PushLive_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushLive__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PushLive_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushLive__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PushLive_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushLive__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PushLive_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PushLive__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushLive class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushLive__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
