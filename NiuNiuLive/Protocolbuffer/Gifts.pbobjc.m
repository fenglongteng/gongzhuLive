// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gifts.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Gifts.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GiftsRoot

@implementation GiftsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GiftsRoot_FileDescriptor

static GPBFileDescriptor *GiftsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Gift

@implementation Gift

@dynamic type;
@dynamic uuid;
@dynamic order;
@dynamic name;
@dynamic goldCoins;
@dynamic allowContinue;
@dynamic hidden;
@dynamic icon;
@dynamic animation;

typedef struct Gift__storage_ {
  uint32_t _has_storage_[1];
  Gift_GiftType type;
  int32_t order;
  int32_t animation;
  NSString *uuid;
  NSString *name;
  NSString *icon;
  int64_t goldCoins;
} Gift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Gift_GiftType_EnumDescriptor,
        .number = Gift_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Gift__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Gift__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_Order,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Gift__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Gift__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goldCoins",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_GoldCoins,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Gift__storage_, goldCoins),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "allowContinue",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_AllowContinue,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hidden",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_Hidden,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_Icon,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Gift__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "animation",
        .dataTypeSpecific.className = NULL,
        .number = Gift_FieldNumber_Animation,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Gift__storage_, animation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Gift class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Gift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002d\000\005\t\000\006\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Gift_Type_RawValue(Gift *message) {
  GPBDescriptor *descriptor = [Gift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Gift_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetGift_Type_RawValue(Gift *message, int32_t value) {
  GPBDescriptor *descriptor = [Gift descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Gift_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Gift_GiftType

GPBEnumDescriptor *Gift_GiftType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "GiftTypeNormal\000GiftTypeRedPackets\000";
    static const int32_t values[] = {
        Gift_GiftType_GiftTypeNormal,
        Gift_GiftType_GiftTypeRedPackets,
    };
    static const char *extraTextFormatInfo = "\002\000\016\000\001\022\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Gift_GiftType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Gift_GiftType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Gift_GiftType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Gift_GiftType_GiftTypeNormal:
    case Gift_GiftType_GiftTypeRedPackets:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetGiftListRequest

@implementation GetGiftListRequest

@dynamic userId;

typedef struct GetGiftListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} GetGiftListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetGiftListRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGiftListRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGiftListRequest class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGiftListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetGiftListResponse

@implementation GetGiftListResponse

@dynamic result;
@dynamic message;
@dynamic giftArray, giftArray_Count;

typedef struct GetGiftListResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *giftArray;
} GetGiftListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = GetGiftListResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGiftListResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = GetGiftListResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetGiftListResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Gift),
        .number = GetGiftListResponse_FieldNumber_GiftArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetGiftListResponse__storage_, giftArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGiftListResponse class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGiftListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetGiftListResponse_Result_RawValue(GetGiftListResponse *message) {
  GPBDescriptor *descriptor = [GetGiftListResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetGiftListResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetGiftListResponse_Result_RawValue(GetGiftListResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetGiftListResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetGiftListResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SendGiftRequest

@implementation SendGiftRequest

@dynamic hasGift, gift;
@dynamic allowMaxUser;
@dynamic needAck;
@dynamic count;

typedef struct SendGiftRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t allowMaxUser;
  int32_t count;
  Gift *gift;
} SendGiftRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gift",
        .dataTypeSpecific.className = GPBStringifySymbol(Gift),
        .number = SendGiftRequest_FieldNumber_Gift,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendGiftRequest__storage_, gift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowMaxUser",
        .dataTypeSpecific.className = NULL,
        .number = SendGiftRequest_FieldNumber_AllowMaxUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendGiftRequest__storage_, allowMaxUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "needAck",
        .dataTypeSpecific.className = NULL,
        .number = SendGiftRequest_FieldNumber_NeedAck,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SendGiftRequest_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendGiftRequest__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendGiftRequest class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendGiftRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\014\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendGiftResponse

@implementation SendGiftResponse

@dynamic result;
@dynamic message;

typedef struct SendGiftResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} SendGiftResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SendGiftResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendGiftResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendGiftResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendGiftResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendGiftResponse class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendGiftResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendGiftResponse_Result_RawValue(SendGiftResponse *message) {
  GPBDescriptor *descriptor = [SendGiftResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendGiftResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSendGiftResponse_Result_RawValue(SendGiftResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SendGiftResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendGiftResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GrabRedPackagesRequest

@implementation GrabRedPackagesRequest

@dynamic giftUuid;

typedef struct GrabRedPackagesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *giftUuid;
} GrabRedPackagesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "giftUuid",
        .dataTypeSpecific.className = NULL,
        .number = GrabRedPackagesRequest_FieldNumber_GiftUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GrabRedPackagesRequest__storage_, giftUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GrabRedPackagesRequest class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrabRedPackagesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005c\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GrabRedPackagesResponse

@implementation GrabRedPackagesResponse

@dynamic result;
@dynamic message;
@dynamic goldCoins;

typedef struct GrabRedPackagesResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  int64_t goldCoins;
} GrabRedPackagesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = GrabRedPackagesResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GrabRedPackagesResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = GrabRedPackagesResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GrabRedPackagesResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goldCoins",
        .dataTypeSpecific.className = NULL,
        .number = GrabRedPackagesResponse_FieldNumber_GoldCoins,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GrabRedPackagesResponse__storage_, goldCoins),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GrabRedPackagesResponse class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrabRedPackagesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GrabRedPackagesResponse_Result_RawValue(GrabRedPackagesResponse *message) {
  GPBDescriptor *descriptor = [GrabRedPackagesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GrabRedPackagesResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetGrabRedPackagesResponse_Result_RawValue(GrabRedPackagesResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GrabRedPackagesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GrabRedPackagesResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PushGift

@implementation PushGift

@dynamic messageId;
@dynamic fromShowId;
@dynamic fromUserId;
@dynamic level;
@dynamic nickName;
@dynamic avatar;
@dynamic needAck;
@dynamic hasGift, gift;
@dynamic count;

typedef struct PushGift__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  int32_t count;
  NSString *fromShowId;
  NSString *fromUserId;
  NSString *nickName;
  NSString *avatar;
  Gift *gift;
  int64_t messageId;
} PushGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushGift__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromShowId",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_FromShowId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushGift__storage_, fromShowId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_FromUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushGift__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_Level,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PushGift__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_NickName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PushGift__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_Avatar,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PushGift__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needAck",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_NeedAck,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gift",
        .dataTypeSpecific.className = GPBStringifySymbol(Gift),
        .number = PushGift_FieldNumber_Gift,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PushGift__storage_, gift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PushGift_FieldNumber_Count,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PushGift__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushGift class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushGift__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\n\000\003\n\000\005\010\000\007\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushGiftAck

@implementation PushGiftAck

@dynamic fromUserId;
@dynamic messageId;

typedef struct PushGiftAck__storage_ {
  uint32_t _has_storage_[1];
  NSString *fromUserId;
  int64_t messageId;
} PushGiftAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = PushGiftAck_FieldNumber_FromUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushGiftAck__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PushGiftAck_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushGiftAck__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushGiftAck class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushGiftAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetGrabRedPackagesResultRequest

@implementation GetGrabRedPackagesResultRequest

@dynamic userId;
@dynamic giftUuid;

typedef struct GetGrabRedPackagesResultRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *giftUuid;
} GetGrabRedPackagesResultRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftUuid",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultRequest_FieldNumber_GiftUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultRequest__storage_, giftUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGrabRedPackagesResultRequest class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGrabRedPackagesResultRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\005c\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetGrabRedPackagesResultResponse

@implementation GetGrabRedPackagesResultResponse

@dynamic result;
@dynamic fromUserId;
@dynamic messageId;
@dynamic redpacksArray, redpacksArray_Count;

typedef struct GetGrabRedPackagesResultResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *fromUserId;
  NSMutableArray *redpacksArray;
  int64_t messageId;
} GetGrabRedPackagesResultResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = GetGrabRedPackagesResultResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultResponse_FieldNumber_FromUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultResponse_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "redpacksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GetGrabRedPackagesResultResponse_GrabRedPackagesResult),
        .number = GetGrabRedPackagesResultResponse_FieldNumber_RedpacksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse__storage_, redpacksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGrabRedPackagesResultResponse class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGrabRedPackagesResultResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\n\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetGrabRedPackagesResultResponse_Result_RawValue(GetGrabRedPackagesResultResponse *message) {
  GPBDescriptor *descriptor = [GetGrabRedPackagesResultResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetGrabRedPackagesResultResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetGrabRedPackagesResultResponse_Result_RawValue(GetGrabRedPackagesResultResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetGrabRedPackagesResultResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetGrabRedPackagesResultResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetGrabRedPackagesResultResponse_GrabRedPackagesResult

@implementation GetGrabRedPackagesResultResponse_GrabRedPackagesResult

@dynamic userId;
@dynamic nickName;
@dynamic goldCoins;
@dynamic avatar;

typedef struct GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *nickName;
  NSString *avatar;
  int64_t goldCoins;
} GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultResponse_GrabRedPackagesResult_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultResponse_GrabRedPackagesResult_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goldCoins",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultResponse_GrabRedPackagesResult_FieldNumber_GoldCoins,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_, goldCoins),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = GetGrabRedPackagesResultResponse_GrabRedPackagesResult_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGrabRedPackagesResultResponse_GrabRedPackagesResult class]
                                     rootClass:[GiftsRoot class]
                                          file:GiftsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGrabRedPackagesResultResponse_GrabRedPackagesResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\010\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetGrabRedPackagesResultResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
