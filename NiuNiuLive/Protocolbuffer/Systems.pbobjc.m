// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Systems.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Systems.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SystemsRoot

@implementation SystemsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SystemsRoot_FileDescriptor

static GPBFileDescriptor *SystemsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SystemGetADListRequest

@implementation SystemGetADListRequest

@dynamic userId;

typedef struct SystemGetADListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} SystemGetADListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemGetADListRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemGetADListRequest class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemGetADListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemGetADListResponse

@implementation SystemGetADListResponse

@dynamic result;
@dynamic message;
@dynamic URLPrefix;
@dynamic ad1Array, ad1Array_Count;
@dynamic ad2Array, ad2Array_Count;
@dynamic ad3Array, ad3Array_Count;

typedef struct SystemGetADListResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSString *URLPrefix;
  NSMutableArray *ad1Array;
  NSMutableArray *ad2Array;
  NSMutableArray *ad3Array;
} SystemGetADListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SystemGetADListResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemGetADListResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemGetADListResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URLPrefix",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListResponse_FieldNumber_URLPrefix,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemGetADListResponse__storage_, URLPrefix),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ad1Array",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemGetADListResponse_AD),
        .number = SystemGetADListResponse_FieldNumber_Ad1Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemGetADListResponse__storage_, ad1Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ad2Array",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemGetADListResponse_AD),
        .number = SystemGetADListResponse_FieldNumber_Ad2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemGetADListResponse__storage_, ad2Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ad3Array",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemGetADListResponse_AD),
        .number = SystemGetADListResponse_FieldNumber_Ad3Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemGetADListResponse__storage_, ad3Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemGetADListResponse class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemGetADListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!\'\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemGetADListResponse_Result_RawValue(SystemGetADListResponse *message) {
  GPBDescriptor *descriptor = [SystemGetADListResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemGetADListResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSystemGetADListResponse_Result_RawValue(SystemGetADListResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemGetADListResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemGetADListResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SystemGetADListResponse_AD

@implementation SystemGetADListResponse_AD

@dynamic sort;
@dynamic timestamp;
@dynamic link;
@dynamic URL;

typedef struct SystemGetADListResponse_AD__storage_ {
  uint32_t _has_storage_[1];
  int32_t sort;
  NSString *link;
  NSString *URL;
  int64_t timestamp;
} SystemGetADListResponse_AD__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sort",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListResponse_AD_FieldNumber_Sort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemGetADListResponse_AD__storage_, sort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListResponse_AD_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemGetADListResponse_AD__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListResponse_AD_FieldNumber_Link,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemGetADListResponse_AD__storage_, link),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetADListResponse_AD_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SystemGetADListResponse_AD__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemGetADListResponse_AD class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemGetADListResponse_AD__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(SystemGetADListResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemGetLiveServerAddressRequest

@implementation SystemGetLiveServerAddressRequest

@dynamic role;
@dynamic id_p;

typedef struct SystemGetLiveServerAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  SystemGetLiveServerAddressRequest_Role role;
  NSString *id_p;
} SystemGetLiveServerAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = SystemGetLiveServerAddressRequest_Role_EnumDescriptor,
        .number = SystemGetLiveServerAddressRequest_FieldNumber_Role,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressRequest__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetLiveServerAddressRequest_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemGetLiveServerAddressRequest class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemGetLiveServerAddressRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemGetLiveServerAddressRequest_Role_RawValue(SystemGetLiveServerAddressRequest *message) {
  GPBDescriptor *descriptor = [SystemGetLiveServerAddressRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemGetLiveServerAddressRequest_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetSystemGetLiveServerAddressRequest_Role_RawValue(SystemGetLiveServerAddressRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemGetLiveServerAddressRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemGetLiveServerAddressRequest_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum SystemGetLiveServerAddressRequest_Role

GPBEnumDescriptor *SystemGetLiveServerAddressRequest_Role_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Pusher\000User\000";
    static const int32_t values[] = {
        SystemGetLiveServerAddressRequest_Role_Pusher,
        SystemGetLiveServerAddressRequest_Role_User,
    };
    static const char *extraTextFormatInfo = "\002\000\006\000\001\004\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SystemGetLiveServerAddressRequest_Role)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SystemGetLiveServerAddressRequest_Role_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SystemGetLiveServerAddressRequest_Role_IsValidValue(int32_t value__) {
  switch (value__) {
    case SystemGetLiveServerAddressRequest_Role_Pusher:
    case SystemGetLiveServerAddressRequest_Role_User:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SystemGetLiveServerAddressResponse

@implementation SystemGetLiveServerAddressResponse

@dynamic result;
@dynamic message;
@dynamic addressArray, addressArray_Count;

typedef struct SystemGetLiveServerAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *addressArray;
} SystemGetLiveServerAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SystemGetLiveServerAddressResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetLiveServerAddressResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SystemGetLiveServerAddressResponse_Address),
        .number = SystemGetLiveServerAddressResponse_FieldNumber_AddressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressResponse__storage_, addressArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemGetLiveServerAddressResponse class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemGetLiveServerAddressResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemGetLiveServerAddressResponse_Result_RawValue(SystemGetLiveServerAddressResponse *message) {
  GPBDescriptor *descriptor = [SystemGetLiveServerAddressResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemGetLiveServerAddressResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSystemGetLiveServerAddressResponse_Result_RawValue(SystemGetLiveServerAddressResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemGetLiveServerAddressResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemGetLiveServerAddressResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SystemGetLiveServerAddressResponse_Address

@implementation SystemGetLiveServerAddressResponse_Address

@dynamic ip;
@dynamic port;

typedef struct SystemGetLiveServerAddressResponse_Address__storage_ {
  uint32_t _has_storage_[1];
  int32_t port;
  NSString *ip;
} SystemGetLiveServerAddressResponse_Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetLiveServerAddressResponse_Address_FieldNumber_Ip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressResponse_Address__storage_, ip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = SystemGetLiveServerAddressResponse_Address_FieldNumber_Port,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemGetLiveServerAddressResponse_Address__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemGetLiveServerAddressResponse_Address class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemGetLiveServerAddressResponse_Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(SystemGetLiveServerAddressResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemLiveServerRegisterRequest

@implementation SystemLiveServerRegisterRequest

@dynamic uuid;

typedef struct SystemLiveServerRegisterRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} SystemLiveServerRegisterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveServerRegisterRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLiveServerRegisterRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLiveServerRegisterRequest class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLiveServerRegisterRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemLiveServerRegisterResponse

@implementation SystemLiveServerRegisterResponse

@dynamic result;
@dynamic message;
@dynamic token;

typedef struct SystemLiveServerRegisterResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSString *token;
} SystemLiveServerRegisterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SystemLiveServerRegisterResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLiveServerRegisterResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveServerRegisterResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemLiveServerRegisterResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveServerRegisterResponse_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemLiveServerRegisterResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLiveServerRegisterResponse class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLiveServerRegisterResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemLiveServerRegisterResponse_Result_RawValue(SystemLiveServerRegisterResponse *message) {
  GPBDescriptor *descriptor = [SystemLiveServerRegisterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLiveServerRegisterResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSystemLiveServerRegisterResponse_Result_RawValue(SystemLiveServerRegisterResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemLiveServerRegisterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLiveServerRegisterResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SystemLiveVerifyTokenRequest

@implementation SystemLiveVerifyTokenRequest

@dynamic userId;
@dynamic token;

typedef struct SystemLiveVerifyTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *token;
} SystemLiveVerifyTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveVerifyTokenRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLiveVerifyTokenRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveVerifyTokenRequest_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemLiveVerifyTokenRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLiveVerifyTokenRequest class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLiveVerifyTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemLiveVerifyTokenResponse

@implementation SystemLiveVerifyTokenResponse

@dynamic result;
@dynamic message;
@dynamic userId;
@dynamic valid;

typedef struct SystemLiveVerifyTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSString *userId;
} SystemLiveVerifyTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SystemLiveVerifyTokenResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLiveVerifyTokenResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveVerifyTokenResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemLiveVerifyTokenResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveVerifyTokenResponse_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemLiveVerifyTokenResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "valid",
        .dataTypeSpecific.className = NULL,
        .number = SystemLiveVerifyTokenResponse_FieldNumber_Valid,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLiveVerifyTokenResponse class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLiveVerifyTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemLiveVerifyTokenResponse_Result_RawValue(SystemLiveVerifyTokenResponse *message) {
  GPBDescriptor *descriptor = [SystemLiveVerifyTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLiveVerifyTokenResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSystemLiveVerifyTokenResponse_Result_RawValue(SystemLiveVerifyTokenResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemLiveVerifyTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLiveVerifyTokenResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SystemUpdateLiveStateRequest

@implementation SystemUpdateLiveStateRequest

@dynamic userId;
@dynamic isLiving;

typedef struct SystemUpdateLiveStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} SystemUpdateLiveStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SystemUpdateLiveStateRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemUpdateLiveStateRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLiving",
        .dataTypeSpecific.className = NULL,
        .number = SystemUpdateLiveStateRequest_FieldNumber_IsLiving,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemUpdateLiveStateRequest class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemUpdateLiveStateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemUpdateLiveStateResponse

@implementation SystemUpdateLiveStateResponse

@dynamic result;
@dynamic message;
@dynamic userId;

typedef struct SystemUpdateLiveStateResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSString *userId;
} SystemUpdateLiveStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = SystemUpdateLiveStateResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemUpdateLiveStateResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SystemUpdateLiveStateResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemUpdateLiveStateResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SystemUpdateLiveStateResponse_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemUpdateLiveStateResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemUpdateLiveStateResponse class]
                                     rootClass:[SystemsRoot class]
                                          file:SystemsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemUpdateLiveStateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemUpdateLiveStateResponse_Result_RawValue(SystemUpdateLiveStateResponse *message) {
  GPBDescriptor *descriptor = [SystemUpdateLiveStateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemUpdateLiveStateResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetSystemUpdateLiveStateResponse_Result_RawValue(SystemUpdateLiveStateResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemUpdateLiveStateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemUpdateLiveStateResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
