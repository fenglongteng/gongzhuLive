// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Heartbeat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Heartbeat.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HeartbeatRoot

@implementation HeartbeatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - HeartbeatRoot_FileDescriptor

static GPBFileDescriptor *HeartbeatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - HeartbeatRequest

@implementation HeartbeatRequest

@dynamic ping;

typedef struct HeartbeatRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *ping;
} HeartbeatRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ping",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatRequest_FieldNumber_Ping,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartbeatRequest__storage_, ping),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartbeatRequest class]
                                     rootClass:[HeartbeatRoot class]
                                          file:HeartbeatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartbeatRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HeartbeatResponse

@implementation HeartbeatResponse

@dynamic result;
@dynamic message;

typedef struct HeartbeatResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} HeartbeatResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = HeartbeatResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartbeatResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeartbeatResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartbeatResponse class]
                                     rootClass:[HeartbeatRoot class]
                                          file:HeartbeatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartbeatResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HeartbeatResponse_Result_RawValue(HeartbeatResponse *message) {
  GPBDescriptor *descriptor = [HeartbeatResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HeartbeatResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetHeartbeatResponse_Result_RawValue(HeartbeatResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HeartbeatResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HeartbeatResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
