// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tasks.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Any.pbobjc.h>
#else
 #import "google/protobuf/Any.pbobjc.h"
#endif

 #import "Tasks.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TasksRoot

@implementation TasksRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TasksRoot_FileDescriptor

static GPBFileDescriptor *TasksRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TasksGetTaskListRequest

@implementation TasksGetTaskListRequest

@dynamic userid;

typedef struct TasksGetTaskListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userid;
} TasksGetTaskListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksGetTaskListRequest__storage_, userid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksGetTaskListRequest class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksGetTaskListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TasksGetTaskListResponse

@implementation TasksGetTaskListResponse

@dynamic result;
@dynamic message;
@dynamic currentTaskArray, currentTaskArray_Count;

typedef struct TasksGetTaskListResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *currentTaskArray;
} TasksGetTaskListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = TasksGetTaskListResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currentTaskArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TasksGetTaskListResponse_CurrentTask),
        .number = TasksGetTaskListResponse_FieldNumber_CurrentTaskArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse__storage_, currentTaskArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksGetTaskListResponse class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksGetTaskListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\000currentTask\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TasksGetTaskListResponse_Result_RawValue(TasksGetTaskListResponse *message) {
  GPBDescriptor *descriptor = [TasksGetTaskListResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TasksGetTaskListResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetTasksGetTaskListResponse_Result_RawValue(TasksGetTaskListResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TasksGetTaskListResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TasksGetTaskListResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - TasksGetTaskListResponse_TaskItem

@implementation TasksGetTaskListResponse_TaskItem

@dynamic title;
@dynamic number;
@dynamic experiencePoint;
@dynamic currentNumber;

typedef struct TasksGetTaskListResponse_TaskItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  int64_t number;
  int64_t experiencePoint;
  int64_t currentNumber;
} TasksGetTaskListResponse_TaskItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_TaskItem_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_TaskItem__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_TaskItem_FieldNumber_Number,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_TaskItem__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "experiencePoint",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_TaskItem_FieldNumber_ExperiencePoint,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_TaskItem__storage_, experiencePoint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currentNumber",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_TaskItem_FieldNumber_CurrentNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_TaskItem__storage_, currentNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksGetTaskListResponse_TaskItem class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksGetTaskListResponse_TaskItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\017\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TasksGetTaskListResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TasksGetTaskListResponse_CurrentTask

@implementation TasksGetTaskListResponse_CurrentTask

@dynamic uuid;
@dynamic order;
@dynamic hasTask, task;

typedef struct TasksGetTaskListResponse_CurrentTask__storage_ {
  uint32_t _has_storage_[1];
  int32_t order;
  NSString *uuid;
  TasksGetTaskListResponse_TaskItem *task;
} TasksGetTaskListResponse_CurrentTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_CurrentTask_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_CurrentTask__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "order",
        .dataTypeSpecific.className = NULL,
        .number = TasksGetTaskListResponse_CurrentTask_FieldNumber_Order,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_CurrentTask__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "task",
        .dataTypeSpecific.className = GPBStringifySymbol(TasksGetTaskListResponse_TaskItem),
        .number = TasksGetTaskListResponse_CurrentTask_FieldNumber_Task,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TasksGetTaskListResponse_CurrentTask__storage_, task),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksGetTaskListResponse_CurrentTask class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksGetTaskListResponse_CurrentTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TasksGetTaskListResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TasksRequest

@implementation TasksRequest

@dynamic uuid;
@dynamic hasParams, params;

typedef struct TasksRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  GPBAny *params;
} TasksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = TasksRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = TasksRequest_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TasksRequest__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksRequest class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TasksRequest_ConstellationParams

@implementation TasksRequest_ConstellationParams

@dynamic constellation;

typedef struct TasksRequest_ConstellationParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *constellation;
} TasksRequest_ConstellationParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "constellation",
        .dataTypeSpecific.className = NULL,
        .number = TasksRequest_ConstellationParams_FieldNumber_Constellation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksRequest_ConstellationParams__storage_, constellation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksRequest_ConstellationParams class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksRequest_ConstellationParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TasksRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TasksResponse

@implementation TasksResponse

@dynamic result;
@dynamic message;

typedef struct TasksResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} TasksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = TasksResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TasksResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = TasksResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TasksResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TasksResponse class]
                                     rootClass:[TasksRoot class]
                                          file:TasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TasksResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TasksResponse_Result_RawValue(TasksResponse *message) {
  GPBDescriptor *descriptor = [TasksResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TasksResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetTasksResponse_Result_RawValue(TasksResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TasksResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TasksResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
