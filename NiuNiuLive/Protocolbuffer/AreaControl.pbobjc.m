// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AreaControl.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "AreaControl.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AreaControlRoot

@implementation AreaControlRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AreaControlRoot_FileDescriptor

static GPBFileDescriptor *AreaControlRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AreaControlAuthorizationRequest

@implementation AreaControlAuthorizationRequest

@dynamic userId;
@dynamic tobe;

typedef struct AreaControlAuthorizationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} AreaControlAuthorizationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlAuthorizationRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlAuthorizationRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tobe",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlAuthorizationRequest_FieldNumber_Tobe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlAuthorizationRequest class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlAuthorizationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AreaControlAuthorizationResponse

@implementation AreaControlAuthorizationResponse

@dynamic result;

typedef struct AreaControlAuthorizationResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
} AreaControlAuthorizationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = AreaControlAuthorizationResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlAuthorizationResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlAuthorizationResponse class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlAuthorizationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AreaControlAuthorizationResponse_Result_RawValue(AreaControlAuthorizationResponse *message) {
  GPBDescriptor *descriptor = [AreaControlAuthorizationResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AreaControlAuthorizationResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetAreaControlAuthorizationResponse_Result_RawValue(AreaControlAuthorizationResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AreaControlAuthorizationResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AreaControlAuthorizationResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AreaControlAuthorizationPush

@implementation AreaControlAuthorizationPush

@dynamic uid;
@dynamic roomId;
@dynamic fromId;
@dynamic tobe;

typedef struct AreaControlAuthorizationPush__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *roomId;
  NSString *fromId;
} AreaControlAuthorizationPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlAuthorizationPush_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlAuthorizationPush__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlAuthorizationPush_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AreaControlAuthorizationPush__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlAuthorizationPush_FieldNumber_FromId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AreaControlAuthorizationPush__storage_, fromId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tobe",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlAuthorizationPush_FieldNumber_Tobe,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlAuthorizationPush class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlAuthorizationPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AreaControlBannedRequest

@implementation AreaControlBannedRequest

@dynamic userId;
@dynamic tobe;

typedef struct AreaControlBannedRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} AreaControlBannedRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlBannedRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlBannedRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tobe",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlBannedRequest_FieldNumber_Tobe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlBannedRequest class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlBannedRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AreaControlBannedResponse

@implementation AreaControlBannedResponse

@dynamic result;

typedef struct AreaControlBannedResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
} AreaControlBannedResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = AreaControlBannedResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlBannedResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlBannedResponse class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlBannedResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AreaControlBannedResponse_Result_RawValue(AreaControlBannedResponse *message) {
  GPBDescriptor *descriptor = [AreaControlBannedResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AreaControlBannedResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetAreaControlBannedResponse_Result_RawValue(AreaControlBannedResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AreaControlBannedResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AreaControlBannedResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AreaControlBannedPush

@implementation AreaControlBannedPush

@dynamic uid;
@dynamic roomId;
@dynamic fromId;
@dynamic tobe;

typedef struct AreaControlBannedPush__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *roomId;
  NSString *fromId;
} AreaControlBannedPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlBannedPush_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlBannedPush__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlBannedPush_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AreaControlBannedPush__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlBannedPush_FieldNumber_FromId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AreaControlBannedPush__storage_, fromId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tobe",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlBannedPush_FieldNumber_Tobe,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlBannedPush class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlBannedPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AreaControlKickOutRequest

@implementation AreaControlKickOutRequest

@dynamic userId;
@dynamic tobe;

typedef struct AreaControlKickOutRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} AreaControlKickOutRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlKickOutRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlKickOutRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tobe",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlKickOutRequest_FieldNumber_Tobe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlKickOutRequest class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlKickOutRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AreaControlKickOutResponse

@implementation AreaControlKickOutResponse

@dynamic result;

typedef struct AreaControlKickOutResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
} AreaControlKickOutResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = AreaControlKickOutResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlKickOutResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlKickOutResponse class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlKickOutResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AreaControlKickOutResponse_Result_RawValue(AreaControlKickOutResponse *message) {
  GPBDescriptor *descriptor = [AreaControlKickOutResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AreaControlKickOutResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetAreaControlKickOutResponse_Result_RawValue(AreaControlKickOutResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AreaControlKickOutResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AreaControlKickOutResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AreaControlKickOutPush

@implementation AreaControlKickOutPush

@dynamic uid;
@dynamic roomId;
@dynamic fromId;
@dynamic tobe;

typedef struct AreaControlKickOutPush__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *roomId;
  NSString *fromId;
} AreaControlKickOutPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlKickOutPush_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AreaControlKickOutPush__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlKickOutPush_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AreaControlKickOutPush__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromId",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlKickOutPush_FieldNumber_FromId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AreaControlKickOutPush__storage_, fromId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tobe",
        .dataTypeSpecific.className = NULL,
        .number = AreaControlKickOutPush_FieldNumber_Tobe,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AreaControlKickOutPush class]
                                     rootClass:[AreaControlRoot class]
                                          file:AreaControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AreaControlKickOutPush__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
