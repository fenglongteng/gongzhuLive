// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chats.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Chats.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChatsRoot

@implementation ChatsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChatsRoot_FileDescriptor

static GPBFileDescriptor *ChatsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ChartsResponse

@implementation ChartsResponse

@dynamic showId;
@dynamic userId;
@dynamic nickName;
@dynamic avatar;
@dynamic brief;
@dynamic history;

typedef struct ChartsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *showId;
  NSString *userId;
  NSString *nickName;
  NSString *avatar;
  NSString *brief;
  int64_t history;
} ChartsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showId",
        .dataTypeSpecific.className = NULL,
        .number = ChartsResponse_FieldNumber_ShowId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChartsResponse__storage_, showId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = ChartsResponse_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChartsResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = ChartsResponse_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChartsResponse__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = ChartsResponse_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChartsResponse__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "brief",
        .dataTypeSpecific.className = NULL,
        .number = ChartsResponse_FieldNumber_Brief,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChartsResponse__storage_, brief),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "history",
        .dataTypeSpecific.className = NULL,
        .number = ChartsResponse_FieldNumber_History,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChartsResponse__storage_, history),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChartsResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChartsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\006\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftChartsForWeeksRequest

@implementation GiftChartsForWeeksRequest

@dynamic userId;

typedef struct GiftChartsForWeeksRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} GiftChartsForWeeksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GiftChartsForWeeksRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftChartsForWeeksRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftChartsForWeeksRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftChartsForWeeksRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftChartsForWeeksResponse

@implementation GiftChartsForWeeksResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct GiftChartsForWeeksResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} GiftChartsForWeeksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = GiftChartsForWeeksResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftChartsForWeeksResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = GiftChartsForWeeksResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftChartsForWeeksResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = GiftChartsForWeeksResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GiftChartsForWeeksResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftChartsForWeeksResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftChartsForWeeksResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GiftChartsForWeeksResponse_Result_RawValue(GiftChartsForWeeksResponse *message) {
  GPBDescriptor *descriptor = [GiftChartsForWeeksResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftChartsForWeeksResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetGiftChartsForWeeksResponse_Result_RawValue(GiftChartsForWeeksResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GiftChartsForWeeksResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftChartsForWeeksResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GiftChatsForMonthRequest

@implementation GiftChatsForMonthRequest

@dynamic userId;

typedef struct GiftChatsForMonthRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} GiftChatsForMonthRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GiftChatsForMonthRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftChatsForMonthRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftChatsForMonthRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftChatsForMonthRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftChatsForMonthResponse

@implementation GiftChatsForMonthResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct GiftChatsForMonthResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} GiftChatsForMonthResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = GiftChatsForMonthResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftChatsForMonthResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = GiftChatsForMonthResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftChatsForMonthResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = GiftChatsForMonthResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GiftChatsForMonthResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftChatsForMonthResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftChatsForMonthResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GiftChatsForMonthResponse_Result_RawValue(GiftChatsForMonthResponse *message) {
  GPBDescriptor *descriptor = [GiftChatsForMonthResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftChatsForMonthResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetGiftChatsForMonthResponse_Result_RawValue(GiftChatsForMonthResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GiftChatsForMonthResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftChatsForMonthResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GiftChatsRequest

@implementation GiftChatsRequest

@dynamic userId;

typedef struct GiftChatsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} GiftChatsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GiftChatsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftChatsRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftChatsRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftChatsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftChatsResponse

@implementation GiftChatsResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct GiftChatsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} GiftChatsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = GiftChatsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftChatsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = GiftChatsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftChatsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = GiftChatsResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GiftChatsResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftChatsResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftChatsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GiftChatsResponse_Result_RawValue(GiftChatsResponse *message) {
  GPBDescriptor *descriptor = [GiftChatsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftChatsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetGiftChatsResponse_Result_RawValue(GiftChatsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GiftChatsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GiftChatsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - OutcomeChatsForWeekRequest

@implementation OutcomeChatsForWeekRequest

@dynamic userId;

typedef struct OutcomeChatsForWeekRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} OutcomeChatsForWeekRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = OutcomeChatsForWeekRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutcomeChatsForWeekRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutcomeChatsForWeekRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutcomeChatsForWeekRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OutcomeChatsForWeekResponse

@implementation OutcomeChatsForWeekResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct OutcomeChatsForWeekResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} OutcomeChatsForWeekResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = OutcomeChatsForWeekResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutcomeChatsForWeekResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = OutcomeChatsForWeekResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OutcomeChatsForWeekResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = OutcomeChatsForWeekResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OutcomeChatsForWeekResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutcomeChatsForWeekResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutcomeChatsForWeekResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OutcomeChatsForWeekResponse_Result_RawValue(OutcomeChatsForWeekResponse *message) {
  GPBDescriptor *descriptor = [OutcomeChatsForWeekResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutcomeChatsForWeekResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetOutcomeChatsForWeekResponse_Result_RawValue(OutcomeChatsForWeekResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [OutcomeChatsForWeekResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutcomeChatsForWeekResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - OutcomeChatsForMonthRequest

@implementation OutcomeChatsForMonthRequest

@dynamic userId;

typedef struct OutcomeChatsForMonthRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} OutcomeChatsForMonthRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = OutcomeChatsForMonthRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutcomeChatsForMonthRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutcomeChatsForMonthRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutcomeChatsForMonthRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OutcomeChatsForMonthResponse

@implementation OutcomeChatsForMonthResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct OutcomeChatsForMonthResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} OutcomeChatsForMonthResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = OutcomeChatsForMonthResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutcomeChatsForMonthResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = OutcomeChatsForMonthResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OutcomeChatsForMonthResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = OutcomeChatsForMonthResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OutcomeChatsForMonthResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutcomeChatsForMonthResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutcomeChatsForMonthResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OutcomeChatsForMonthResponse_Result_RawValue(OutcomeChatsForMonthResponse *message) {
  GPBDescriptor *descriptor = [OutcomeChatsForMonthResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutcomeChatsForMonthResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetOutcomeChatsForMonthResponse_Result_RawValue(OutcomeChatsForMonthResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [OutcomeChatsForMonthResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutcomeChatsForMonthResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - OutcomeChatsRequest

@implementation OutcomeChatsRequest

@dynamic userId;

typedef struct OutcomeChatsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} OutcomeChatsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = OutcomeChatsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutcomeChatsRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutcomeChatsRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutcomeChatsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OutcomeChatsResponse

@implementation OutcomeChatsResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct OutcomeChatsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} OutcomeChatsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = OutcomeChatsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OutcomeChatsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = OutcomeChatsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OutcomeChatsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = OutcomeChatsResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OutcomeChatsResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutcomeChatsResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutcomeChatsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OutcomeChatsResponse_Result_RawValue(OutcomeChatsResponse *message) {
  GPBDescriptor *descriptor = [OutcomeChatsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutcomeChatsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetOutcomeChatsResponse_Result_RawValue(OutcomeChatsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [OutcomeChatsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OutcomeChatsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LikeChatsRequest

@implementation LikeChatsRequest

@dynamic userId;

typedef struct LikeChatsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} LikeChatsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = LikeChatsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LikeChatsRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LikeChatsRequest class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LikeChatsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LikeChatsResponse

@implementation LikeChatsResponse

@dynamic result;
@dynamic message;
@dynamic responseArray, responseArray_Count;

typedef struct LikeChatsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *responseArray;
} LikeChatsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = LikeChatsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LikeChatsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = LikeChatsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LikeChatsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "responseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChartsResponse),
        .number = LikeChatsResponse_FieldNumber_ResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LikeChatsResponse__storage_, responseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LikeChatsResponse class]
                                     rootClass:[ChatsRoot class]
                                          file:ChatsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LikeChatsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LikeChatsResponse_Result_RawValue(LikeChatsResponse *message) {
  GPBDescriptor *descriptor = [LikeChatsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LikeChatsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetLikeChatsResponse_Result_RawValue(LikeChatsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [LikeChatsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LikeChatsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
