// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rooms.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Rooms.pbobjc.h"
 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RoomsRoot

@implementation RoomsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RoomsRoot_FileDescriptor

static GPBFileDescriptor *RoomsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"live"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Room

@implementation Room

@dynamic ownerId;
@dynamic avatar;
@dynamic nickName;
@dynamic brief;
@dynamic cityName;
@dynamic gameName;
@dynamic isPrivate;
@dynamic isLiving;
@dynamic isGaming;
@dynamic isLiked;
@dynamic charmValue;
@dynamic audienceTotalCount;
@dynamic longitude;
@dynamic latitude;
@dynamic avatarsArray, avatarsArray_Count;
@dynamic audienceArray, audienceArray_Count;
@dynamic abstract;

typedef struct Room__storage_ {
  uint32_t _has_storage_[1];
  NSString *ownerId;
  NSString *avatar;
  NSString *nickName;
  NSString *brief;
  NSString *cityName;
  NSString *gameName;
  NSMutableArray *avatarsArray;
  NSMutableArray *audienceArray;
  NSString *abstract;
  int64_t charmValue;
  int64_t audienceTotalCount;
  double longitude;
  double latitude;
} Room__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Room__storage_, ownerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_Avatar,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Room__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Room__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "brief",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_Brief,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Room__storage_, brief),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_CityName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Room__storage_, cityName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameName",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_GameName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Room__storage_, gameName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPrivate",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_IsPrivate,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isLiving",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_IsLiving,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isGaming",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_IsGaming,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isLiked",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_IsLiked,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "charmValue",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_CharmValue,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(Room__storage_, charmValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "audienceTotalCount",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_AudienceTotalCount,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(Room__storage_, audienceTotalCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_Longitude,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(Room__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_Latitude,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(Room__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "avatarsArray",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_AvatarsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Room__storage_, avatarsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audienceArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room_Audience),
        .number = Room_FieldNumber_AudienceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Room__storage_, audienceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "abstract",
        .dataTypeSpecific.className = NULL,
        .number = Room_FieldNumber_Abstract,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(Room__storage_, abstract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Room class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Room__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\007\000\003\010\000\005\010\000\006\010\000\007\t\000\010\010\000\t\010\000\n\007\000\013\n\000\014\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Room_Audience

@implementation Room_Audience

@dynamic userId;
@dynamic avatar;
@dynamic level;
@dynamic isTooHao;

typedef struct Room_Audience__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  NSString *userId;
  NSString *avatar;
} Room_Audience__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Room_Audience_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Room_Audience__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = Room_Audience_FieldNumber_Avatar,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Room_Audience__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = Room_Audience_FieldNumber_Level,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Room_Audience__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isTooHao",
        .dataTypeSpecific.className = NULL,
        .number = Room_Audience_FieldNumber_IsTooHao,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Room_Audience class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Room_Audience__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Room)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetRoomsRequest

@implementation RoomsGetRoomsRequest

@dynamic skip;
@dynamic limit;

typedef struct RoomsGetRoomsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t skip;
  int32_t limit;
} RoomsGetRoomsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skip",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRoomsRequest_FieldNumber_Skip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetRoomsRequest__storage_, skip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRoomsRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetRoomsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetRoomsRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetRoomsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetRoomsResponse

@implementation RoomsGetRoomsResponse

@dynamic result;
@dynamic message;
@dynamic roomsArray, roomsArray_Count;

typedef struct RoomsGetRoomsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *roomsArray;
} RoomsGetRoomsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetRoomsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetRoomsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRoomsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetRoomsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetRoomsResponse_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomsGetRoomsResponse__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetRoomsResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetRoomsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetRoomsResponse_Result_RawValue(RoomsGetRoomsResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetRoomsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetRoomsResponse_Result_RawValue(RoomsGetRoomsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetRoomsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsGetRoomInfoRequest

@implementation RoomsGetRoomInfoRequest

@dynamic userId;

typedef struct RoomsGetRoomInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RoomsGetRoomInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRoomInfoRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetRoomInfoRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetRoomInfoRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetRoomInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetRoomInfoResponse

@implementation RoomsGetRoomInfoResponse

@dynamic result;
@dynamic message;
@dynamic hasRoom, room;

typedef struct RoomsGetRoomInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  Room *room;
} RoomsGetRoomInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetRoomInfoResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetRoomInfoResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRoomInfoResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetRoomInfoResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "room",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetRoomInfoResponse_FieldNumber_Room,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RoomsGetRoomInfoResponse__storage_, room),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetRoomInfoResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetRoomInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetRoomInfoResponse_Result_RawValue(RoomsGetRoomInfoResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetRoomInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetRoomInfoResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetRoomInfoResponse_Result_RawValue(RoomsGetRoomInfoResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetRoomInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetRoomInfoResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsCreateRoomRequest

@implementation RoomsCreateRoomRequest

@dynamic userId;
@dynamic password;
@dynamic abstract;

typedef struct RoomsCreateRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *password;
  NSString *abstract;
} RoomsCreateRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RoomsCreateRoomRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsCreateRoomRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = RoomsCreateRoomRequest_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsCreateRoomRequest__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abstract",
        .dataTypeSpecific.className = NULL,
        .number = RoomsCreateRoomRequest_FieldNumber_Abstract,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RoomsCreateRoomRequest__storage_, abstract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsCreateRoomRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsCreateRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsCreateRoomResponse

@implementation RoomsCreateRoomResponse

@dynamic result;
@dynamic message;

typedef struct RoomsCreateRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} RoomsCreateRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsCreateRoomResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsCreateRoomResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsCreateRoomResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsCreateRoomResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsCreateRoomResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsCreateRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsCreateRoomResponse_Result_RawValue(RoomsCreateRoomResponse *message) {
  GPBDescriptor *descriptor = [RoomsCreateRoomResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsCreateRoomResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsCreateRoomResponse_Result_RawValue(RoomsCreateRoomResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsCreateRoomResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsCreateRoomResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsJoinRoomRequest

@implementation RoomsJoinRoomRequest

@dynamic userId;
@dynamic password;

typedef struct RoomsJoinRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *password;
} RoomsJoinRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RoomsJoinRoomRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsJoinRoomRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = RoomsJoinRoomRequest_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsJoinRoomRequest__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsJoinRoomRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsJoinRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsJoinRoomResponse

@implementation RoomsJoinRoomResponse

@dynamic result;
@dynamic message;

typedef struct RoomsJoinRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} RoomsJoinRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsJoinRoomResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsJoinRoomResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsJoinRoomResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsJoinRoomResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsJoinRoomResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsJoinRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsJoinRoomResponse_Result_RawValue(RoomsJoinRoomResponse *message) {
  GPBDescriptor *descriptor = [RoomsJoinRoomResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsJoinRoomResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsJoinRoomResponse_Result_RawValue(RoomsJoinRoomResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsJoinRoomResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsJoinRoomResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsGetNearestRoomRequest

@implementation RoomsGetNearestRoomRequest

@dynamic offset;
@dynamic limit;

typedef struct RoomsGetNearestRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t limit;
} RoomsGetNearestRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetNearestRoomRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetNearestRoomRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetNearestRoomRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetNearestRoomRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetNearestRoomRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetNearestRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetNearestRoomResponse

@implementation RoomsGetNearestRoomResponse

@dynamic result;
@dynamic message;
@dynamic roomsArray, roomsArray_Count;

typedef struct RoomsGetNearestRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *roomsArray;
} RoomsGetNearestRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetNearestRoomResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetNearestRoomResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetNearestRoomResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetNearestRoomResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetNearestRoomResponse_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomsGetNearestRoomResponse__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetNearestRoomResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetNearestRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetNearestRoomResponse_Result_RawValue(RoomsGetNearestRoomResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetNearestRoomResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetNearestRoomResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetNearestRoomResponse_Result_RawValue(RoomsGetNearestRoomResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetNearestRoomResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetNearestRoomResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsGetLikeRoomsRequest

@implementation RoomsGetLikeRoomsRequest

@dynamic userId;
@dynamic skip;
@dynamic limit;

typedef struct RoomsGetLikeRoomsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t skip;
  int32_t limit;
  NSString *userId;
} RoomsGetLikeRoomsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetLikeRoomsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetLikeRoomsRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skip",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetLikeRoomsRequest_FieldNumber_Skip,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetLikeRoomsRequest__storage_, skip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetLikeRoomsRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RoomsGetLikeRoomsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetLikeRoomsRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetLikeRoomsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetLikeRoomsResponse

@implementation RoomsGetLikeRoomsResponse

@dynamic result;
@dynamic message;
@dynamic roomsArray, roomsArray_Count;

typedef struct RoomsGetLikeRoomsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *roomsArray;
} RoomsGetLikeRoomsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetLikeRoomsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetLikeRoomsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetLikeRoomsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetLikeRoomsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetLikeRoomsResponse_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomsGetLikeRoomsResponse__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetLikeRoomsResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetLikeRoomsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetLikeRoomsResponse_Result_RawValue(RoomsGetLikeRoomsResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetLikeRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetLikeRoomsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetLikeRoomsResponse_Result_RawValue(RoomsGetLikeRoomsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetLikeRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetLikeRoomsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsGetHotRoomsRequest

@implementation RoomsGetHotRoomsRequest

@dynamic skip;
@dynamic limit;

typedef struct RoomsGetHotRoomsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t skip;
  int32_t limit;
} RoomsGetHotRoomsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skip",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetHotRoomsRequest_FieldNumber_Skip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetHotRoomsRequest__storage_, skip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetHotRoomsRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetHotRoomsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetHotRoomsRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetHotRoomsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetHotRoomsResponse

@implementation RoomsGetHotRoomsResponse

@dynamic result;
@dynamic message;
@dynamic roomsArray, roomsArray_Count;

typedef struct RoomsGetHotRoomsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *roomsArray;
} RoomsGetHotRoomsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetHotRoomsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetHotRoomsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetHotRoomsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetHotRoomsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetHotRoomsResponse_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomsGetHotRoomsResponse__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetHotRoomsResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetHotRoomsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetHotRoomsResponse_Result_RawValue(RoomsGetHotRoomsResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetHotRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetHotRoomsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetHotRoomsResponse_Result_RawValue(RoomsGetHotRoomsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetHotRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetHotRoomsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsGetRecommendRoomsRequest

@implementation RoomsGetRecommendRoomsRequest

@dynamic skip;
@dynamic limit;

typedef struct RoomsGetRecommendRoomsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t skip;
  int32_t limit;
} RoomsGetRecommendRoomsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skip",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRecommendRoomsRequest_FieldNumber_Skip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetRecommendRoomsRequest__storage_, skip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRecommendRoomsRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetRecommendRoomsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetRecommendRoomsRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetRecommendRoomsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetRecommendRoomsResponse

@implementation RoomsGetRecommendRoomsResponse

@dynamic result;
@dynamic message;
@dynamic roomsArray, roomsArray_Count;

typedef struct RoomsGetRecommendRoomsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *roomsArray;
} RoomsGetRecommendRoomsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetRecommendRoomsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetRecommendRoomsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetRecommendRoomsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetRecommendRoomsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetRecommendRoomsResponse_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomsGetRecommendRoomsResponse__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetRecommendRoomsResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetRecommendRoomsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetRecommendRoomsResponse_Result_RawValue(RoomsGetRecommendRoomsResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetRecommendRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetRecommendRoomsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetRecommendRoomsResponse_Result_RawValue(RoomsGetRecommendRoomsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetRecommendRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetRecommendRoomsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsGetGamingRoomsRequest

@implementation RoomsGetGamingRoomsRequest

@dynamic gameName;
@dynamic skip;
@dynamic limit;

typedef struct RoomsGetGamingRoomsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t skip;
  int32_t limit;
  NSString *gameName;
} RoomsGetGamingRoomsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameName",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetGamingRoomsRequest_FieldNumber_GameName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetGamingRoomsRequest__storage_, gameName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skip",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetGamingRoomsRequest_FieldNumber_Skip,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetGamingRoomsRequest__storage_, skip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetGamingRoomsRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RoomsGetGamingRoomsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetGamingRoomsRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetGamingRoomsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsGetGamingRoomsResponse

@implementation RoomsGetGamingRoomsResponse

@dynamic result;
@dynamic message;
@dynamic roomsArray, roomsArray_Count;

typedef struct RoomsGetGamingRoomsResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
  NSMutableArray *roomsArray;
} RoomsGetGamingRoomsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsGetGamingRoomsResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsGetGamingRoomsResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsGetGamingRoomsResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsGetGamingRoomsResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Room),
        .number = RoomsGetGamingRoomsResponse_FieldNumber_RoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RoomsGetGamingRoomsResponse__storage_, roomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsGetGamingRoomsResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsGetGamingRoomsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsGetGamingRoomsResponse_Result_RawValue(RoomsGetGamingRoomsResponse *message) {
  GPBDescriptor *descriptor = [RoomsGetGamingRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetGamingRoomsResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsGetGamingRoomsResponse_Result_RawValue(RoomsGetGamingRoomsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsGetGamingRoomsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsGetGamingRoomsResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RoomsAlterRoomPasswordRequest

@implementation RoomsAlterRoomPasswordRequest

@dynamic password;

typedef struct RoomsAlterRoomPasswordRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *password;
} RoomsAlterRoomPasswordRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = RoomsAlterRoomPasswordRequest_FieldNumber_Password,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsAlterRoomPasswordRequest__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsAlterRoomPasswordRequest class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsAlterRoomPasswordRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomsAlterRoomPasswordResponse

@implementation RoomsAlterRoomPasswordResponse

@dynamic result;
@dynamic message;

typedef struct RoomsAlterRoomPasswordResponse__storage_ {
  uint32_t _has_storage_[1];
  Result result;
  NSString *message;
} RoomsAlterRoomPasswordResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = Result_EnumDescriptor,
        .number = RoomsAlterRoomPasswordResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomsAlterRoomPasswordResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RoomsAlterRoomPasswordResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RoomsAlterRoomPasswordResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomsAlterRoomPasswordResponse class]
                                     rootClass:[RoomsRoot class]
                                          file:RoomsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomsAlterRoomPasswordResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RoomsAlterRoomPasswordResponse_Result_RawValue(RoomsAlterRoomPasswordResponse *message) {
  GPBDescriptor *descriptor = [RoomsAlterRoomPasswordResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsAlterRoomPasswordResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetRoomsAlterRoomPasswordResponse_Result_RawValue(RoomsAlterRoomPasswordResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RoomsAlterRoomPasswordResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RoomsAlterRoomPasswordResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
