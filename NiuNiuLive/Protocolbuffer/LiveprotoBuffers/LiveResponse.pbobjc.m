// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LiveResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "LiveResponse.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LiveResponseRoot

@implementation LiveResponseRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum LiveResult

GPBEnumDescriptor *LiveResult_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Succeeded\000InternalServerError\000UnknownErr"
        "or\000InvalidUserInfo\000InvalidUserIdOrPasswo"
        "rd\000InsufficientBalance\000UserExistsError\000U"
        "serNotExistsError\000InvalidParameters\000Room"
        "NotExistsError\000UserNotInTheRoomError\000IsS"
        "ignedInToday\000UnknownTaskUuid\000UserNotLogg"
        "ed\000";
    static const int32_t values[] = {
        LiveResult_Succeeded,
        LiveResult_InternalServerError,
        LiveResult_UnknownError,
        LiveResult_InvalidUserInfo,
        LiveResult_InvalidUserIdOrPassword,
        LiveResult_InsufficientBalance,
        LiveResult_UserExistsError,
        LiveResult_UserNotExistsError,
        LiveResult_InvalidParameters,
        LiveResult_RoomNotExistsError,
        LiveResult_UserNotInTheRoomError,
        LiveResult_IsSignedInToday,
        LiveResult_UnknownTaskUuid,
        LiveResult_UserNotLogged,
    };
    static const char *extraTextFormatInfo = "\016\000\t\000\001\023\000\002\014\000\003\017\000\004\027\000\005\023\000\006\017\000\007\022\000\010\021\000\t\022\000\n\025\000\013\017\000\014\014c\000\r\r\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LiveResult)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LiveResult_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LiveResult_IsValidValue(int32_t value__) {
  switch (value__) {
    case LiveResult_Succeeded:
    case LiveResult_InternalServerError:
    case LiveResult_UnknownError:
    case LiveResult_InvalidUserInfo:
    case LiveResult_InvalidUserIdOrPassword:
    case LiveResult_InsufficientBalance:
    case LiveResult_UserExistsError:
    case LiveResult_UserNotExistsError:
    case LiveResult_InvalidParameters:
    case LiveResult_RoomNotExistsError:
    case LiveResult_UserNotInTheRoomError:
    case LiveResult_IsSignedInToday:
    case LiveResult_UnknownTaskUuid:
    case LiveResult_UserNotLogged:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
